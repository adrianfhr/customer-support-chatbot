{
	"info": {
		"_postman_id": "5403b403-cef0-4bef-a842-94d6870ae344",
		"name": "Customer Support Chatbot API",
		"description": "Comprehensive testing collection for Customer Support Chatbot with LangChain, Ollama, and FastAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42951327"
	},
	"item": [
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/healthz",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "OpenAPI Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/openapi.json",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"openapi.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat Conversations",
			"item": [
				{
					"name": "Chat - General Greeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has chat structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('session_id');",
									"    pm.expect(jsonData).to.have.property('turn_index');",
									"    pm.expect(jsonData).to.have.property('tool_calls');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"pm.test(\"Session ID matches request\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.session_id).to.eql(pm.variables.get('session_id'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"user_message\": \"Halo! Saya butuh bantuan customer support.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Order Status Query (Valid Order)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tool was called\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.tool_calls).to.include('get_order_status');",
									"});",
									"",
									"pm.test(\"Response contains order information\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('pesanan');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"user_message\": \"Dimana order saya? order ID: ORD123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Order Status Query (Invalid Order)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tool was called\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.tool_calls).to.include('get_order_status');",
									"});",
									"",
									"pm.test(\"Response indicates order not found\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('tidak ditemukan');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"user_message\": \"Cek order saya, order ID: ORD999999\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Product Information Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tool was called\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.tool_calls).to.include('get_product_info');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"user_message\": \"Apa kelebihan Laptop Gaming X Pro?\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Warranty Policy Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tool was called\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.tool_calls).to.include('get_warranty_policy');",
									"});",
									"",
									"pm.test(\"Response contains warranty information\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('garansi');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"user_message\": \"Bagaimana cara klaim garansi?\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Multiple Questions in One Session",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"user_message\": \"Terima kasih atas bantuannya! Apakah Anda memiliki layanan lain?\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Get Session Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has session structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('session_id');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData.messages).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Messages have correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.messages.length > 0) {",
									"        const message = jsonData.messages[0];",
									"        pm.expect(message).to.have.property('role');",
									"        pm.expect(message).to.have.property('content');",
									"        pm.expect(message).to.have.property('turn_index');",
									"        pm.expect(message).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sessions/{{session_id}}/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions",
								"{{session_id}}",
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-existent Session Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has empty messages\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.messages).to.be.an('array');",
									"    pm.expect(jsonData.messages).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sessions/non-existent-session/messages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions",
								"non-existent-session",
								"messages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Management",
			"item": [
				{
					"name": "Seed Test Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms order creation\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('order_ids');",
									"    pm.expect(jsonData.order_ids).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orders\": [\n    {\n      \"id\": \"ORD{{$randomInt}}\",\n      \"user_id\": \"user123\",\n      \"status\": \"shipped\",\n      \"items\": \"Laptop Gaming ROG Strix G15\",\n      \"total_amount\": 15000000,\n      \"created_at\": \"2025-09-15T10:00:00Z\"\n    },\n    {\n      \"id\": \"ORD{{$randomInt}}\",\n      \"user_id\": \"user456\",\n      \"status\": \"delivered\",\n      \"items\": \"Smartphone Samsung Galaxy S24\",\n      \"total_amount\": 12000000,\n      \"created_at\": \"2025-09-14T14:30:00Z\"\n    },\n    {\n      \"id\": \"ORD{{$randomInt}}\",\n      \"user_id\": \"user789\",\n      \"status\": \"pending\",\n      \"items\": \"Headset Gaming SteelSeries\",\n      \"total_amount\": 2500000,\n      \"created_at\": \"2025-09-16T09:15:00Z\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/orders/seed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"seed"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Chat - Missing Session ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response indicates validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_message\": \"Hello, I need help!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Missing User Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response indicates validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"test-session\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat - Empty Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response indicates validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"test-session\",\n  \"user_message\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performance Tests",
			"item": [
				{
					"name": "Chat - Long Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"performance-test-{{$randomInt}}\",\n  \"user_message\": \"Halo, saya sedang menguji kinerja sistem chatbot ini. Saya membutuhkan bantuan terkait pesanan saya dan ingin memastikan sistem dapat menangani pesan yang lebih panjang dengan efisien. Bisakah Anda membantu saya memahami bagaimana kebijakan garansi berlaku untuk elektronik, khususnya laptop dan smartphone? Saya juga ingin tahu tentang kebijakan pengembalian barang dan berapa lama waktu yang dibutuhkan untuk memproses dan mengirimkan pesanan. Selain itu, saya ingin tahu apakah ada penawaran khusus atau diskon untuk pembelian dalam jumlah besar dan apakah layanan pelanggan tersedia 24/7. Terima kasih atas bantuannya.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Multiple Rapid Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"session_id\": \"rapid-test-{{$randomInt}}\",\n  \"user_message\": \"Pertanyaan singkat {{$randomInt}}: Di mana pesanan saya ORD123?\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "postman-test-{{$randomInt}}",
			"type": "string"
		}
	]
}