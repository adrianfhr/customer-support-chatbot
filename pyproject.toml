[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "customer-support-chatbot"
version = "1.0.0"
description = "AI-powered customer support chatbot with LangChain, Ollama, and FastAPI"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "AI Team", email = "ai-team@company.com" },
]
keywords = ["chatbot", "langchain", "ollama", "fastapi", "customer-support"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Communications :: Chat",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.104.0,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.5.0,<3.0.0",
    "sqlalchemy>=2.0.20,<3.0.0",
    "psycopg2-binary>=2.9.7,<3.0.0",
    "alembic>=1.12.0,<2.0.0",
    "langchain>=0.0.340,<0.1.0",
    "langchain-community>=0.0.38,<0.1.0",
    "langchain-core>=0.1.0,<0.2.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "tenacity>=8.2.3,<9.0.0",
    "structlog>=23.2.0,<24.0.0",
    "python-json-logger>=2.0.7,<3.0.0",
    "python-multipart>=0.0.6,<0.1.0",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<0.22.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.0,<0.26.0",
    "ruff>=0.1.6,<0.2.0",
    "black>=23.10.0,<24.0.0",
    "mypy>=1.7.0,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
]

test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<0.22.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.0,<0.26.0",
]

[project.urls]
Homepage = "https://github.com/company/customer-support-chatbot"
Documentation = "https://github.com/company/customer-support-chatbot#readme"
Repository = "https://github.com/company/customer-support-chatbot.git"
"Bug Tracker" = "https://github.com/company/customer-support-chatbot/issues"

[project.scripts]
chatbot = "app.main:main"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments
    "SIM", # flake8-simplify
    "TC", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ICN", # flake8-import-conventions
    "YTT", # flake8-2020
    "S", # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "S104",  # possible binding to all interfaces
    "S108",  # probable insecure usage of temp file/directory
    "S608",  # possible SQL injection vector through string-based query construction
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "S106"]
"app/db/models.py" = ["S608"]

[tool.ruff.isort]
known-first-party = ["app"]

# Black configuration
[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_community.*", 
    "langchain_core.*",
    "sqlalchemy.*",
    "alembic.*",
    "psycopg2.*",
    "tenacity.*",
    "structlog.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
    "-ra",
]
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (slower, external deps)",
    "slow: marks tests as slow running tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
